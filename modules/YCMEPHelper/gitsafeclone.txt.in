# Based on https://gitlab.kitware.com/cmake/cmake/-/blob/v3.30.2/Modules/ExternalProject/gitclone.cmake.in
# but with the modifications from https://github.com/robotology/ycm-cmake-modules/commit/582b5bca17c31ab511d6cba7b9a8111fc91e0e55
# Furthermore, other modications were done to keep compatibility with 3.16

# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
# file Copyright.txt or https://cmake.org/licensing for details.

cmake_minimum_required(VERSION 3.5)

if(EXISTS "@gitclone_stampfile@" AND EXISTS "@gitclone_infofile@" AND
  "@gitclone_stampfile@" IS_NEWER_THAN "@gitclone_infofile@")
  message(VERBOSE
    "Avoiding repeated git clone, stamp file is up to date: "
    "'@gitclone_stampfile@'"
  )
  return()
endif()

# Even at VERBOSE level, we don't want to see the commands executed, but
# enabling them to be shown for DEBUG may be useful to help diagnose problems.
set(maybe_show_command "")
if (CMAKE_VERSION VERSION_GREATER_EQUAL 3.25)
  cmake_language(GET_MESSAGE_LOG_LEVEL active_log_level)
  if(active_log_level MATCHES "DEBUG|TRACE")
    set(maybe_show_command COMMAND_ECHO STDOUT)
  endif()
endif()

if(EXISTS "@source_dir@")
  if(NOT IS_DIRECTORY "@source_dir@")
    # FIXME Perhaps support symbolic links?
    message(FATAL_ERROR "\"@source_dir@\" exists and is not a git repository. Remove it and try again")
  elseif(NOT IS_DIRECTORY "@source_dir@/.git")
    file(GLOB files "@source_dir@/*")
    list(LENGTH files nfiles)
    if(nfiles)
      message(FATAL_ERROR "\"@source_dir@\" folder exists and is not a git repository. Remove it and try again")
    endif()
  else()
    # Already initialized git repository: no need to clone again
    execute_process(
      COMMAND "@git_EXECUTABLE@" config --local --get remote.origin.url
      WORKING_DIRECTORY "@work_dir@/@src_name@"
      OUTPUT_VARIABLE origin_url
      RESULT_VARIABLE error_code
      OUTPUT_STRIP_TRAILING_WHITESPACE
      )
    if(error_code)
      message(FATAL_ERROR "Failed to get origin remote url in: '@work_dir@/@src_name@'")
    endif()
    if("${origin_url}" STREQUAL "@git_repository@")
      message(STATUS "Avoiding repeated git clone, repository already exists")
      return()
    else()
      string(TIMESTAMP now "%Y%m%d%H%M%S")
      message(WARNING "Repository URL is different. Renaming 'origin' remote to 'origin.${now}'")
      execute_process(
        COMMAND "@git_EXECUTABLE@" remote rename origin origin.${now}
        WORKING_DIRECTORY "@work_dir@/@src_name@"
        RESULT_VARIABLE error_code
        )
      if(error_code)
        message(FATAL_ERROR "Failed to rename remote in: '@work_dir@/@src_name@'")
      endif()
      execute_process(
        COMMAND "@git_EXECUTABLE@" remote add origin "@git_repository@"
        WORKING_DIRECTORY "@work_dir@/@src_name@"
        RESULT_VARIABLE error_code
        )
      if(error_code)
        message(FATAL_ERROR "Failed to add origin remote in: '@work_dir@/@src_name@'")
      endif()
      # try the fetch 3 times incase there is an odd git fetch issue
      set(error_code 1)
      set(number_of_tries 0)
      while(error_code AND number_of_tries LESS 3)
        execute_process(
          COMMAND "@git_EXECUTABLE@" fetch @git_clone_options@ origin
          WORKING_DIRECTORY "@work_dir@/@src_name@"
          RESULT_VARIABLE error_code
          )
        math(EXPR number_of_tries "${number_of_tries} + 1")
      endwhile()
      if(number_of_tries GREATER 1)
        message(STATUS "Had to git fetch more than once:
                ${number_of_tries} times.")
      endif()
      if(error_code)
        message(FATAL_ERROR "Failed to fetch in: '@work_dir@/@src_name@'")
      endif()
    endif()
  endif()
endif()

# Now perform the clone if still required
if(NOT IS_DIRECTORY "@source_dir@/.git")
  # try the clone 3 times in case there is an odd git clone issue
  set(error_code 1)
  set(number_of_tries 0)
  while(error_code AND number_of_tries LESS 3)
    execute_process(
      COMMAND "@git_EXECUTABLE@" ${git_options} clone ${git_clone_options} "@git_repository@" "@src_name@"
      WORKING_DIRECTORY "@work_dir@"
      RESULT_VARIABLE error_code
      )
    math(EXPR number_of_tries "${number_of_tries} + 1")
  endwhile()
  if(number_of_tries GREATER 1)
    message(STATUS "Had to git clone more than once:
            ${number_of_tries} times.")
  endif()
  if(error_code)
    message(FATAL_ERROR "Failed to clone repository: '@git_repository@'")
  endif()
endif()

execute_process(
  COMMAND "@git_EXECUTABLE@"
          checkout "@git_tag@" @git_checkout_explicit--@
  WORKING_DIRECTORY "@work_dir@/@src_name@"
  RESULT_VARIABLE error_code
  ${maybe_show_command}
)
if(error_code)
  message(FATAL_ERROR "Failed to checkout tag: '@git_tag@'")
endif()

set(init_submodules @init_submodules@)
if(init_submodules)
  execute_process(
    COMMAND "@git_EXECUTABLE@" @git_submodules_config_options@
            submodule update @git_submodules_recurse@ --init @git_submodules@
    WORKING_DIRECTORY "@work_dir@/@src_name@"
    RESULT_VARIABLE error_code
    ${maybe_show_command}
  )
endif()
if(error_code)
  message(FATAL_ERROR "Failed to update submodules in: '@work_dir@/@src_name@'")
endif()

# Complete success, update the script-last-run stamp file:
#
execute_process(
  COMMAND ${CMAKE_COMMAND} -E copy "@gitclone_infofile@" "@gitclone_stampfile@"
  RESULT_VARIABLE error_code
  ${maybe_show_command}
)
if(error_code)
  message(FATAL_ERROR "Failed to copy script-last-run stamp file: '@gitclone_stampfile@'")
endif()